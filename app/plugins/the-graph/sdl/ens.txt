"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AbiChanged implements ResolverEvent {
  """Concatenation of block number and log ID"""
  id: ID!

  """Used to derive relationships to Resolvers"""
  resolver: Resolver!

  """The block number at which the event was emitted"""
  blockNumber: Int!

  """The transaction hash of the transaction in which the event was emitted"""
  transactionID: Bytes!

  """The content type of the ABI change"""
  contentType: BigInt!
}

input AbiChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  contentType: BigInt
  contentType_not: BigInt
  contentType_gt: BigInt
  contentType_lt: BigInt
  contentType_gte: BigInt
  contentType_lte: BigInt
  contentType_in: [BigInt!]
  contentType_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AbiChanged_filter]
  or: [AbiChanged_filter]
}

enum AbiChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  contentType
}

type Account {
  """The unique identifier for the account"""
  id: ID!

  """The domains owned by the account"""
  domains(skip: Int = 0, first: Int = 100, orderBy: Domain_orderBy, orderDirection: OrderDirection, where: Domain_filter): [Domain!]!

  """The WrappedDomains owned by the account"""
  wrappedDomains(skip: Int = 0, first: Int = 100, orderBy: WrappedDomain_orderBy, orderDirection: OrderDirection, where: WrappedDomain_filter): [WrappedDomain!]

  """The Registrations made by the account"""
  registrations(skip: Int = 0, first: Int = 100, orderBy: Registration_orderBy, orderDirection: OrderDirection, where: Registration_filter): [Registration!]
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains_: Domain_filter
  wrappedDomains_: WrappedDomain_filter
  registrations_: Registration_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  domains
  wrappedDomains
  registrations
}

type AddrChanged implements ResolverEvent {
  """Unique identifier for this event"""
  id: ID!

  """The resolver associated with this event"""
  resolver: Resolver!

  """The block number at which this event occurred"""
  blockNumber: Int!

  """The transaction ID for the transaction in which this event occurred"""
  transactionID: Bytes!

  """The new address associated with the resolver"""
  addr: Account!
}

input AddrChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  addr: String
  addr_not: String
  addr_gt: String
  addr_lt: String
  addr_gte: String
  addr_lte: String
  addr_in: [String!]
  addr_not_in: [String!]
  addr_contains: String
  addr_contains_nocase: String
  addr_not_contains: String
  addr_not_contains_nocase: String
  addr_starts_with: String
  addr_starts_with_nocase: String
  addr_not_starts_with: String
  addr_not_starts_with_nocase: String
  addr_ends_with: String
  addr_ends_with_nocase: String
  addr_not_ends_with: String
  addr_not_ends_with_nocase: String
  addr_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AddrChanged_filter]
  or: [AddrChanged_filter]
}

enum AddrChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  addr
  addr__id
}

enum Aggregation_interval {
  hour
  day
}

type AuthorisationChanged implements ResolverEvent {
  """Unique identifier for this event"""
  id: ID!

  """The resolver associated with this event"""
  resolver: Resolver!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash associated with the event"""
  transactionID: Bytes!

  """The owner of the authorisation"""
  owner: Bytes!

  """The target of the authorisation"""
  target: Bytes!

  """Whether the authorisation was added or removed"""
  isAuthorized: Boolean!
}

input AuthorisationChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  target: Bytes
  target_not: Bytes
  target_gt: Bytes
  target_lt: Bytes
  target_gte: Bytes
  target_lte: Bytes
  target_in: [Bytes!]
  target_not_in: [Bytes!]
  target_contains: Bytes
  target_not_contains: Bytes
  isAuthorized: Boolean
  isAuthorized_not: Boolean
  isAuthorized_in: [Boolean!]
  isAuthorized_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AuthorisationChanged_filter]
  or: [AuthorisationChanged_filter]
}

enum AuthorisationChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  owner
  target
  isAuthorized
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type ContenthashChanged implements ResolverEvent {
  """Concatenation of block number and log ID"""
  id: ID!

  """Used to derive relationships to Resolvers"""
  resolver: Resolver!

  """The block number where the event occurred"""
  blockNumber: Int!

  """The ID of the transaction where the event occurred"""
  transactionID: Bytes!

  """The new content hash for the domain"""
  hash: Bytes!
}

input ContenthashChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ContenthashChanged_filter]
  or: [ContenthashChanged_filter]
}

enum ContenthashChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  hash
}

type Domain {
  """The namehash of the name"""
  id: ID!

  """
  The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  """
  name: String

  """The human readable label name (imported from CSV), if known"""
  labelName: String

  """keccak256(labelName)"""
  labelhash: Bytes

  """The namehash (id) of the parent name"""
  parent: Domain

  """Can count domains from length of array"""
  subdomains(skip: Int = 0, first: Int = 100, orderBy: Domain_orderBy, orderDirection: OrderDirection, where: Domain_filter): [Domain!]!

  """The number of subdomains"""
  subdomainCount: Int!

  """Address logged from current resolver, if any"""
  resolvedAddress: Account

  """The resolver that controls the domain's settings"""
  resolver: Resolver

  """The time-to-live (TTL) value of the domain's records"""
  ttl: BigInt

  """Indicates whether the domain has been migrated to a new registrar"""
  isMigrated: Boolean!

  """The time when the domain was created"""
  createdAt: BigInt!

  """The account that owns the domain"""
  owner: Account!

  """The account that owns the ERC721 NFT for the domain"""
  registrant: Account

  """The account that owns the wrapped domain"""
  wrappedOwner: Account

  """
  The expiry date for the domain, from either the registration, or the wrapped domain if PCC is burned
  """
  expiryDate: BigInt

  """The registration associated with the domain"""
  registration: Registration

  """The wrapped domain associated with the domain"""
  wrappedDomain: WrappedDomain

  """The events associated with the domain"""
  events(skip: Int = 0, first: Int = 100, orderBy: DomainEvent_orderBy, orderDirection: OrderDirection, where: DomainEvent_filter): [DomainEvent!]!
}

interface DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!
}

input DomainEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DomainEvent_filter]
  or: [DomainEvent_filter]
}

enum DomainEvent_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
}

input Domain_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  labelName: String
  labelName_not: String
  labelName_gt: String
  labelName_lt: String
  labelName_gte: String
  labelName_lte: String
  labelName_in: [String!]
  labelName_not_in: [String!]
  labelName_contains: String
  labelName_contains_nocase: String
  labelName_not_contains: String
  labelName_not_contains_nocase: String
  labelName_starts_with: String
  labelName_starts_with_nocase: String
  labelName_not_starts_with: String
  labelName_not_starts_with_nocase: String
  labelName_ends_with: String
  labelName_ends_with_nocase: String
  labelName_not_ends_with: String
  labelName_not_ends_with_nocase: String
  labelhash: Bytes
  labelhash_not: Bytes
  labelhash_gt: Bytes
  labelhash_lt: Bytes
  labelhash_gte: Bytes
  labelhash_lte: Bytes
  labelhash_in: [Bytes!]
  labelhash_not_in: [Bytes!]
  labelhash_contains: Bytes
  labelhash_not_contains: Bytes
  parent: String
  parent_not: String
  parent_gt: String
  parent_lt: String
  parent_gte: String
  parent_lte: String
  parent_in: [String!]
  parent_not_in: [String!]
  parent_contains: String
  parent_contains_nocase: String
  parent_not_contains: String
  parent_not_contains_nocase: String
  parent_starts_with: String
  parent_starts_with_nocase: String
  parent_not_starts_with: String
  parent_not_starts_with_nocase: String
  parent_ends_with: String
  parent_ends_with_nocase: String
  parent_not_ends_with: String
  parent_not_ends_with_nocase: String
  parent_: Domain_filter
  subdomains_: Domain_filter
  subdomainCount: Int
  subdomainCount_not: Int
  subdomainCount_gt: Int
  subdomainCount_lt: Int
  subdomainCount_gte: Int
  subdomainCount_lte: Int
  subdomainCount_in: [Int!]
  subdomainCount_not_in: [Int!]
  resolvedAddress: String
  resolvedAddress_not: String
  resolvedAddress_gt: String
  resolvedAddress_lt: String
  resolvedAddress_gte: String
  resolvedAddress_lte: String
  resolvedAddress_in: [String!]
  resolvedAddress_not_in: [String!]
  resolvedAddress_contains: String
  resolvedAddress_contains_nocase: String
  resolvedAddress_not_contains: String
  resolvedAddress_not_contains_nocase: String
  resolvedAddress_starts_with: String
  resolvedAddress_starts_with_nocase: String
  resolvedAddress_not_starts_with: String
  resolvedAddress_not_starts_with_nocase: String
  resolvedAddress_ends_with: String
  resolvedAddress_ends_with_nocase: String
  resolvedAddress_not_ends_with: String
  resolvedAddress_not_ends_with_nocase: String
  resolvedAddress_: Account_filter
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  ttl: BigInt
  ttl_not: BigInt
  ttl_gt: BigInt
  ttl_lt: BigInt
  ttl_gte: BigInt
  ttl_lte: BigInt
  ttl_in: [BigInt!]
  ttl_not_in: [BigInt!]
  isMigrated: Boolean
  isMigrated_not: Boolean
  isMigrated_in: [Boolean!]
  isMigrated_not_in: [Boolean!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  registrant: String
  registrant_not: String
  registrant_gt: String
  registrant_lt: String
  registrant_gte: String
  registrant_lte: String
  registrant_in: [String!]
  registrant_not_in: [String!]
  registrant_contains: String
  registrant_contains_nocase: String
  registrant_not_contains: String
  registrant_not_contains_nocase: String
  registrant_starts_with: String
  registrant_starts_with_nocase: String
  registrant_not_starts_with: String
  registrant_not_starts_with_nocase: String
  registrant_ends_with: String
  registrant_ends_with_nocase: String
  registrant_not_ends_with: String
  registrant_not_ends_with_nocase: String
  registrant_: Account_filter
  wrappedOwner: String
  wrappedOwner_not: String
  wrappedOwner_gt: String
  wrappedOwner_lt: String
  wrappedOwner_gte: String
  wrappedOwner_lte: String
  wrappedOwner_in: [String!]
  wrappedOwner_not_in: [String!]
  wrappedOwner_contains: String
  wrappedOwner_contains_nocase: String
  wrappedOwner_not_contains: String
  wrappedOwner_not_contains_nocase: String
  wrappedOwner_starts_with: String
  wrappedOwner_starts_with_nocase: String
  wrappedOwner_not_starts_with: String
  wrappedOwner_not_starts_with_nocase: String
  wrappedOwner_ends_with: String
  wrappedOwner_ends_with_nocase: String
  wrappedOwner_not_ends_with: String
  wrappedOwner_not_ends_with_nocase: String
  wrappedOwner_: Account_filter
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  registration_: Registration_filter
  wrappedDomain_: WrappedDomain_filter
  events_: DomainEvent_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Domain_filter]
  or: [Domain_filter]
}

enum Domain_orderBy {
  id
  name
  labelName
  labelhash
  parent
  parent__id
  parent__name
  parent__labelName
  parent__labelhash
  parent__subdomainCount
  parent__ttl
  parent__isMigrated
  parent__createdAt
  parent__expiryDate
  subdomains
  subdomainCount
  resolvedAddress
  resolvedAddress__id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  ttl
  isMigrated
  createdAt
  owner
  owner__id
  registrant
  registrant__id
  wrappedOwner
  wrappedOwner__id
  expiryDate
  registration
  registration__id
  registration__registrationDate
  registration__expiryDate
  registration__cost
  registration__labelName
  wrappedDomain
  wrappedDomain__id
  wrappedDomain__expiryDate
  wrappedDomain__fuses
  wrappedDomain__name
  events
}

type ExpiryExtended implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """
  The new expiry date associated with the domain after the extension event
  """
  expiryDate: BigInt!
}

input ExpiryExtended_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ExpiryExtended_filter]
  or: [ExpiryExtended_filter]
}

enum ExpiryExtended_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  expiryDate
}

type FusesSet implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """The number of fuses associated with the domain after the set event"""
  fuses: Int!
}

input FusesSet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  fuses: Int
  fuses_not: Int
  fuses_gt: Int
  fuses_lt: Int
  fuses_gte: Int
  fuses_lte: Int
  fuses_in: [Int!]
  fuses_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FusesSet_filter]
  or: [FusesSet_filter]
}

enum FusesSet_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  fuses
}

"""8 bytes signed integer"""
scalar Int8

type InterfaceChanged implements ResolverEvent {
  """Concatenation of block number and log ID"""
  id: ID!

  """Used to derive relationships to Resolvers"""
  resolver: Resolver!

  """The block number in which the event occurred"""
  blockNumber: Int!

  """The transaction ID for the transaction in which the event occurred"""
  transactionID: Bytes!

  """The ID of the EIP-1820 interface that was changed"""
  interfaceID: Bytes!

  """The address of the contract that implements the interface"""
  implementer: Bytes!
}

input InterfaceChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  interfaceID: Bytes
  interfaceID_not: Bytes
  interfaceID_gt: Bytes
  interfaceID_lt: Bytes
  interfaceID_gte: Bytes
  interfaceID_lte: Bytes
  interfaceID_in: [Bytes!]
  interfaceID_not_in: [Bytes!]
  interfaceID_contains: Bytes
  interfaceID_not_contains: Bytes
  implementer: Bytes
  implementer_not: Bytes
  implementer_gt: Bytes
  implementer_lt: Bytes
  implementer_gte: Bytes
  implementer_lte: Bytes
  implementer_in: [Bytes!]
  implementer_not_in: [Bytes!]
  implementer_contains: Bytes
  implementer_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [InterfaceChanged_filter]
  or: [InterfaceChanged_filter]
}

enum InterfaceChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  interfaceID
  implementer
}

type MulticoinAddrChanged implements ResolverEvent {
  """Unique identifier for the event"""
  id: ID!

  """Resolver associated with this event"""
  resolver: Resolver!

  """Block number in which this event was emitted"""
  blockNumber: Int!

  """Transaction ID in which this event was emitted"""
  transactionID: Bytes!

  """The coin type of the changed address"""
  coinType: BigInt!

  """The new address value for the given coin type"""
  addr: Bytes!
}

input MulticoinAddrChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  coinType: BigInt
  coinType_not: BigInt
  coinType_gt: BigInt
  coinType_lt: BigInt
  coinType_gte: BigInt
  coinType_lte: BigInt
  coinType_in: [BigInt!]
  coinType_not_in: [BigInt!]
  addr: Bytes
  addr_not: Bytes
  addr_gt: Bytes
  addr_lt: Bytes
  addr_gte: Bytes
  addr_lte: Bytes
  addr_in: [Bytes!]
  addr_not_in: [Bytes!]
  addr_contains: Bytes
  addr_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MulticoinAddrChanged_filter]
  or: [MulticoinAddrChanged_filter]
}

enum MulticoinAddrChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  coinType
  addr
}

type NameChanged implements ResolverEvent {
  """Concatenation of block number and log ID"""
  id: ID!

  """Used to derive relationships to Resolvers"""
  resolver: Resolver!

  """Block number where event occurred"""
  blockNumber: Int!

  """Unique transaction ID where event occurred"""
  transactionID: Bytes!

  """New ENS name value"""
  name: String!
}

input NameChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NameChanged_filter]
  or: [NameChanged_filter]
}

enum NameChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  name
}

type NameRegistered implements RegistrationEvent {
  """The unique identifier of the NameRegistered event"""
  id: ID!

  """The registration associated with the event"""
  registration: Registration!

  """The block number of the event"""
  blockNumber: Int!

  """The transaction ID associated with the event"""
  transactionID: Bytes!

  """The account that registered the name"""
  registrant: Account!

  """The expiry date of the registration"""
  expiryDate: BigInt!
}

input NameRegistered_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  registrant: String
  registrant_not: String
  registrant_gt: String
  registrant_lt: String
  registrant_gte: String
  registrant_lte: String
  registrant_in: [String!]
  registrant_not_in: [String!]
  registrant_contains: String
  registrant_contains_nocase: String
  registrant_not_contains: String
  registrant_not_contains_nocase: String
  registrant_starts_with: String
  registrant_starts_with_nocase: String
  registrant_not_starts_with: String
  registrant_not_starts_with_nocase: String
  registrant_ends_with: String
  registrant_ends_with_nocase: String
  registrant_not_ends_with: String
  registrant_not_ends_with_nocase: String
  registrant_: Account_filter
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NameRegistered_filter]
  or: [NameRegistered_filter]
}

enum NameRegistered_orderBy {
  id
  registration
  registration__id
  registration__registrationDate
  registration__expiryDate
  registration__cost
  registration__labelName
  blockNumber
  transactionID
  registrant
  registrant__id
  expiryDate
}

type NameRenewed implements RegistrationEvent {
  """The unique identifier of the NameRenewed event"""
  id: ID!

  """The registration associated with the event"""
  registration: Registration!

  """The block number of the event"""
  blockNumber: Int!

  """The transaction ID associated with the event"""
  transactionID: Bytes!

  """The new expiry date of the registration"""
  expiryDate: BigInt!
}

input NameRenewed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NameRenewed_filter]
  or: [NameRenewed_filter]
}

enum NameRenewed_orderBy {
  id
  registration
  registration__id
  registration__registrationDate
  registration__expiryDate
  registration__cost
  registration__labelName
  blockNumber
  transactionID
  expiryDate
}

type NameTransferred implements RegistrationEvent {
  """The ID of the event"""
  id: ID!

  """The registration associated with the event"""
  registration: Registration!

  """The block number of the event"""
  blockNumber: Int!

  """The transaction ID of the event"""
  transactionID: Bytes!

  """The new owner of the domain"""
  newOwner: Account!
}

input NameTransferred_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  newOwner: String
  newOwner_not: String
  newOwner_gt: String
  newOwner_lt: String
  newOwner_gte: String
  newOwner_lte: String
  newOwner_in: [String!]
  newOwner_not_in: [String!]
  newOwner_contains: String
  newOwner_contains_nocase: String
  newOwner_not_contains: String
  newOwner_not_contains_nocase: String
  newOwner_starts_with: String
  newOwner_starts_with_nocase: String
  newOwner_not_starts_with: String
  newOwner_not_starts_with_nocase: String
  newOwner_ends_with: String
  newOwner_ends_with_nocase: String
  newOwner_not_ends_with: String
  newOwner_not_ends_with_nocase: String
  newOwner_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NameTransferred_filter]
  or: [NameTransferred_filter]
}

enum NameTransferred_orderBy {
  id
  registration
  registration__id
  registration__registrationDate
  registration__expiryDate
  registration__cost
  registration__labelName
  blockNumber
  transactionID
  newOwner
  newOwner__id
}

type NameUnwrapped implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """The account that owns the domain after it was unwrapped"""
  owner: Account!
}

input NameUnwrapped_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NameUnwrapped_filter]
  or: [NameUnwrapped_filter]
}

enum NameUnwrapped_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  owner
  owner__id
}

type NameWrapped implements DomainEvent {
  """The unique identifier of the wrapped domain"""
  id: ID!

  """The domain name associated with the wrapped domain"""
  domain: Domain!

  """The block number at which the wrapped domain was wrapped"""
  blockNumber: Int!

  """The transaction hash of the transaction that wrapped the domain"""
  transactionID: Bytes!

  """The human-readable name of the wrapped domain"""
  name: String

  """The number of fuses associated with the wrapped domain"""
  fuses: Int!

  """The account that owns the wrapped domain"""
  owner: Account!

  """The expiry date of the wrapped domain registration"""
  expiryDate: BigInt!
}

input NameWrapped_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  fuses: Int
  fuses_not: Int
  fuses_gt: Int
  fuses_lt: Int
  fuses_gte: Int
  fuses_lte: Int
  fuses_in: [Int!]
  fuses_not_in: [Int!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NameWrapped_filter]
  or: [NameWrapped_filter]
}

enum NameWrapped_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  name
  fuses
  owner
  owner__id
  expiryDate
}

type NewOwner implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The parent domain of the domain name associated with the event"""
  parentDomain: Domain!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """The new account that owns the domain"""
  owner: Account!
}

input NewOwner_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  parentDomain: String
  parentDomain_not: String
  parentDomain_gt: String
  parentDomain_lt: String
  parentDomain_gte: String
  parentDomain_lte: String
  parentDomain_in: [String!]
  parentDomain_not_in: [String!]
  parentDomain_contains: String
  parentDomain_contains_nocase: String
  parentDomain_not_contains: String
  parentDomain_not_contains_nocase: String
  parentDomain_starts_with: String
  parentDomain_starts_with_nocase: String
  parentDomain_not_starts_with: String
  parentDomain_not_starts_with_nocase: String
  parentDomain_ends_with: String
  parentDomain_ends_with_nocase: String
  parentDomain_not_ends_with: String
  parentDomain_not_ends_with_nocase: String
  parentDomain_: Domain_filter
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewOwner_filter]
  or: [NewOwner_filter]
}

enum NewOwner_orderBy {
  id
  parentDomain
  parentDomain__id
  parentDomain__name
  parentDomain__labelName
  parentDomain__labelhash
  parentDomain__subdomainCount
  parentDomain__ttl
  parentDomain__isMigrated
  parentDomain__createdAt
  parentDomain__expiryDate
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  owner
  owner__id
}

type NewResolver implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """The new resolver contract address associated with the domain"""
  resolver: Resolver!
}

input NewResolver_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewResolver_filter]
  or: [NewResolver_filter]
}

enum NewResolver_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
}

type NewTTL implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """The new TTL value (in seconds) associated with the domain"""
  ttl: BigInt!
}

input NewTTL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  ttl: BigInt
  ttl_not: BigInt
  ttl_gt: BigInt
  ttl_lt: BigInt
  ttl_gte: BigInt
  ttl_lte: BigInt
  ttl_in: [BigInt!]
  ttl_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewTTL_filter]
  or: [NewTTL_filter]
}

enum NewTTL_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  ttl
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PubkeyChanged implements ResolverEvent {
  """Concatenation of block number and log ID"""
  id: ID!

  """Used to derive relationships to Resolvers"""
  resolver: Resolver!

  """Block number of the Ethereum block where the event occurred"""
  blockNumber: Int!

  """Transaction hash of the Ethereum transaction where the event occurred"""
  transactionID: Bytes!

  """The x-coordinate of the new public key"""
  x: Bytes!

  """The y-coordinate of the new public key"""
  y: Bytes!
}

input PubkeyChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  x: Bytes
  x_not: Bytes
  x_gt: Bytes
  x_lt: Bytes
  x_gte: Bytes
  x_lte: Bytes
  x_in: [Bytes!]
  x_not_in: [Bytes!]
  x_contains: Bytes
  x_not_contains: Bytes
  y: Bytes
  y_not: Bytes
  y_gt: Bytes
  y_lt: Bytes
  y_gte: Bytes
  y_lte: Bytes
  y_in: [Bytes!]
  y_not_in: [Bytes!]
  y_contains: Bytes
  y_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PubkeyChanged_filter]
  or: [PubkeyChanged_filter]
}

enum PubkeyChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  x
  y
}

type Query {
  domain(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Domain
  domains(
    skip: Int = 0
    first: Int = 100
    orderBy: Domain_orderBy
    orderDirection: OrderDirection
    where: Domain_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Domain!]!
  transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  newOwner(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewOwner
  newOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: NewOwner_orderBy
    orderDirection: OrderDirection
    where: NewOwner_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewOwner!]!
  newResolver(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewResolver
  newResolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: NewResolver_orderBy
    orderDirection: OrderDirection
    where: NewResolver_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewResolver!]!
  newTTL(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewTTL
  newTTLs(
    skip: Int = 0
    first: Int = 100
    orderBy: NewTTL_orderBy
    orderDirection: OrderDirection
    where: NewTTL_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewTTL!]!
  wrappedTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WrappedTransfer
  wrappedTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: WrappedTransfer_orderBy
    orderDirection: OrderDirection
    where: WrappedTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WrappedTransfer!]!
  nameWrapped(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameWrapped
  nameWrappeds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameWrapped_orderBy
    orderDirection: OrderDirection
    where: NameWrapped_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameWrapped!]!
  nameUnwrapped(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameUnwrapped
  nameUnwrappeds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameUnwrapped_orderBy
    orderDirection: OrderDirection
    where: NameUnwrapped_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameUnwrapped!]!
  fusesSet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FusesSet
  fusesSets(
    skip: Int = 0
    first: Int = 100
    orderBy: FusesSet_orderBy
    orderDirection: OrderDirection
    where: FusesSet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FusesSet!]!
  expiryExtended(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExpiryExtended
  expiryExtendeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ExpiryExtended_orderBy
    orderDirection: OrderDirection
    where: ExpiryExtended_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExpiryExtended!]!
  registration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Registration
  registrations(
    skip: Int = 0
    first: Int = 100
    orderBy: Registration_orderBy
    orderDirection: OrderDirection
    where: Registration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Registration!]!
  nameRegistered(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameRegistered
  nameRegistereds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameRegistered_orderBy
    orderDirection: OrderDirection
    where: NameRegistered_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameRegistered!]!
  nameRenewed(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameRenewed
  nameReneweds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameRenewed_orderBy
    orderDirection: OrderDirection
    where: NameRenewed_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameRenewed!]!
  nameTransferred(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameTransferred
  nameTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameTransferred_orderBy
    orderDirection: OrderDirection
    where: NameTransferred_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameTransferred!]!
  wrappedDomain(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WrappedDomain
  wrappedDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: WrappedDomain_orderBy
    orderDirection: OrderDirection
    where: WrappedDomain_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WrappedDomain!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  resolver(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Resolver
  resolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: Resolver_orderBy
    orderDirection: OrderDirection
    where: Resolver_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Resolver!]!
  addrChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AddrChanged
  addrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: AddrChanged_orderBy
    orderDirection: OrderDirection
    where: AddrChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AddrChanged!]!
  multicoinAddrChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MulticoinAddrChanged
  multicoinAddrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: MulticoinAddrChanged_orderBy
    orderDirection: OrderDirection
    where: MulticoinAddrChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MulticoinAddrChanged!]!
  nameChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameChanged
  nameChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameChanged_orderBy
    orderDirection: OrderDirection
    where: NameChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameChanged!]!
  abiChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AbiChanged
  abiChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: AbiChanged_orderBy
    orderDirection: OrderDirection
    where: AbiChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AbiChanged!]!
  pubkeyChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PubkeyChanged
  pubkeyChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: PubkeyChanged_orderBy
    orderDirection: OrderDirection
    where: PubkeyChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PubkeyChanged!]!
  textChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TextChanged
  textChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TextChanged_orderBy
    orderDirection: OrderDirection
    where: TextChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TextChanged!]!
  contenthashChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContenthashChanged
  contenthashChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ContenthashChanged_orderBy
    orderDirection: OrderDirection
    where: ContenthashChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ContenthashChanged!]!
  interfaceChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InterfaceChanged
  interfaceChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: InterfaceChanged_orderBy
    orderDirection: OrderDirection
    where: InterfaceChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InterfaceChanged!]!
  authorisationChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuthorisationChanged
  authorisationChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: AuthorisationChanged_orderBy
    orderDirection: OrderDirection
    where: AuthorisationChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuthorisationChanged!]!
  versionChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VersionChanged
  versionChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: VersionChanged_orderBy
    orderDirection: OrderDirection
    where: VersionChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VersionChanged!]!
  domainEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DomainEvent
  domainEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DomainEvent_orderBy
    orderDirection: OrderDirection
    where: DomainEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DomainEvent!]!
  registrationEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegistrationEvent
  registrationEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RegistrationEvent_orderBy
    orderDirection: OrderDirection
    where: RegistrationEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegistrationEvent!]!
  resolverEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ResolverEvent
  resolverEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ResolverEvent_orderBy
    orderDirection: OrderDirection
    where: ResolverEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ResolverEvent!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Registration {
  """The unique identifier of the registration"""
  id: ID!

  """The domain name associated with the registration"""
  domain: Domain!

  """The registration date of the domain"""
  registrationDate: BigInt!

  """The expiry date of the domain"""
  expiryDate: BigInt!

  """The cost associated with the domain registration"""
  cost: BigInt

  """The account that registered the domain"""
  registrant: Account!

  """The human-readable label name associated with the domain registration"""
  labelName: String

  """The events associated with the domain registration"""
  events(skip: Int = 0, first: Int = 100, orderBy: RegistrationEvent_orderBy, orderDirection: OrderDirection, where: RegistrationEvent_filter): [RegistrationEvent!]!
}

interface RegistrationEvent {
  """The unique identifier of the registration event"""
  id: ID!

  """The registration associated with the event"""
  registration: Registration!

  """The block number of the event"""
  blockNumber: Int!

  """The transaction ID associated with the event"""
  transactionID: Bytes!
}

input RegistrationEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RegistrationEvent_filter]
  or: [RegistrationEvent_filter]
}

enum RegistrationEvent_orderBy {
  id
  registration
  registration__id
  registration__registrationDate
  registration__expiryDate
  registration__cost
  registration__labelName
  blockNumber
  transactionID
}

input Registration_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  registrationDate: BigInt
  registrationDate_not: BigInt
  registrationDate_gt: BigInt
  registrationDate_lt: BigInt
  registrationDate_gte: BigInt
  registrationDate_lte: BigInt
  registrationDate_in: [BigInt!]
  registrationDate_not_in: [BigInt!]
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  cost: BigInt
  cost_not: BigInt
  cost_gt: BigInt
  cost_lt: BigInt
  cost_gte: BigInt
  cost_lte: BigInt
  cost_in: [BigInt!]
  cost_not_in: [BigInt!]
  registrant: String
  registrant_not: String
  registrant_gt: String
  registrant_lt: String
  registrant_gte: String
  registrant_lte: String
  registrant_in: [String!]
  registrant_not_in: [String!]
  registrant_contains: String
  registrant_contains_nocase: String
  registrant_not_contains: String
  registrant_not_contains_nocase: String
  registrant_starts_with: String
  registrant_starts_with_nocase: String
  registrant_not_starts_with: String
  registrant_not_starts_with_nocase: String
  registrant_ends_with: String
  registrant_ends_with_nocase: String
  registrant_not_ends_with: String
  registrant_not_ends_with_nocase: String
  registrant_: Account_filter
  labelName: String
  labelName_not: String
  labelName_gt: String
  labelName_lt: String
  labelName_gte: String
  labelName_lte: String
  labelName_in: [String!]
  labelName_not_in: [String!]
  labelName_contains: String
  labelName_contains_nocase: String
  labelName_not_contains: String
  labelName_not_contains_nocase: String
  labelName_starts_with: String
  labelName_starts_with_nocase: String
  labelName_not_starts_with: String
  labelName_not_starts_with_nocase: String
  labelName_ends_with: String
  labelName_ends_with_nocase: String
  labelName_not_ends_with: String
  labelName_not_ends_with_nocase: String
  events_: RegistrationEvent_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Registration_filter]
  or: [Registration_filter]
}

enum Registration_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  registrationDate
  expiryDate
  cost
  registrant
  registrant__id
  labelName
  events
}

type Resolver {
  """
  The unique identifier for this resolver, which is a concatenation of the resolver address and the domain namehash
  """
  id: ID!

  """The domain that this resolver is associated with"""
  domain: Domain

  """The address of the resolver contract"""
  address: Bytes!

  """
  The current value of the 'addr' record for this resolver, as determined by the associated events
  """
  addr: Account

  """The content hash for this resolver, in binary format"""
  contentHash: Bytes

  """The set of observed text record keys for this resolver"""
  texts: [String!]

  """The set of observed SLIP-44 coin types for this resolver"""
  coinTypes: [BigInt!]

  """The events associated with this resolver"""
  events(skip: Int = 0, first: Int = 100, orderBy: ResolverEvent_orderBy, orderDirection: OrderDirection, where: ResolverEvent_filter): [ResolverEvent!]!
}

interface ResolverEvent {
  """Concatenation of block number and log ID"""
  id: ID!

  """Used to derive relationships to Resolvers"""
  resolver: Resolver!

  """The block number that the event occurred on"""
  blockNumber: Int!

  """The transaction hash of the event"""
  transactionID: Bytes!
}

input ResolverEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ResolverEvent_filter]
  or: [ResolverEvent_filter]
}

enum ResolverEvent_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
}

input Resolver_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  addr: String
  addr_not: String
  addr_gt: String
  addr_lt: String
  addr_gte: String
  addr_lte: String
  addr_in: [String!]
  addr_not_in: [String!]
  addr_contains: String
  addr_contains_nocase: String
  addr_not_contains: String
  addr_not_contains_nocase: String
  addr_starts_with: String
  addr_starts_with_nocase: String
  addr_not_starts_with: String
  addr_not_starts_with_nocase: String
  addr_ends_with: String
  addr_ends_with_nocase: String
  addr_not_ends_with: String
  addr_not_ends_with_nocase: String
  addr_: Account_filter
  contentHash: Bytes
  contentHash_not: Bytes
  contentHash_gt: Bytes
  contentHash_lt: Bytes
  contentHash_gte: Bytes
  contentHash_lte: Bytes
  contentHash_in: [Bytes!]
  contentHash_not_in: [Bytes!]
  contentHash_contains: Bytes
  contentHash_not_contains: Bytes
  texts: [String!]
  texts_not: [String!]
  texts_contains: [String!]
  texts_contains_nocase: [String!]
  texts_not_contains: [String!]
  texts_not_contains_nocase: [String!]
  coinTypes: [BigInt!]
  coinTypes_not: [BigInt!]
  coinTypes_contains: [BigInt!]
  coinTypes_contains_nocase: [BigInt!]
  coinTypes_not_contains: [BigInt!]
  coinTypes_not_contains_nocase: [BigInt!]
  events_: ResolverEvent_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Resolver_filter]
  or: [Resolver_filter]
}

enum Resolver_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  address
  addr
  addr__id
  contentHash
  texts
  coinTypes
  events
}

type Subscription {
  domain(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Domain
  domains(
    skip: Int = 0
    first: Int = 100
    orderBy: Domain_orderBy
    orderDirection: OrderDirection
    where: Domain_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Domain!]!
  transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  newOwner(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewOwner
  newOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: NewOwner_orderBy
    orderDirection: OrderDirection
    where: NewOwner_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewOwner!]!
  newResolver(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewResolver
  newResolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: NewResolver_orderBy
    orderDirection: OrderDirection
    where: NewResolver_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewResolver!]!
  newTTL(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewTTL
  newTTLs(
    skip: Int = 0
    first: Int = 100
    orderBy: NewTTL_orderBy
    orderDirection: OrderDirection
    where: NewTTL_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewTTL!]!
  wrappedTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WrappedTransfer
  wrappedTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: WrappedTransfer_orderBy
    orderDirection: OrderDirection
    where: WrappedTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WrappedTransfer!]!
  nameWrapped(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameWrapped
  nameWrappeds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameWrapped_orderBy
    orderDirection: OrderDirection
    where: NameWrapped_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameWrapped!]!
  nameUnwrapped(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameUnwrapped
  nameUnwrappeds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameUnwrapped_orderBy
    orderDirection: OrderDirection
    where: NameUnwrapped_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameUnwrapped!]!
  fusesSet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FusesSet
  fusesSets(
    skip: Int = 0
    first: Int = 100
    orderBy: FusesSet_orderBy
    orderDirection: OrderDirection
    where: FusesSet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FusesSet!]!
  expiryExtended(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExpiryExtended
  expiryExtendeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ExpiryExtended_orderBy
    orderDirection: OrderDirection
    where: ExpiryExtended_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExpiryExtended!]!
  registration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Registration
  registrations(
    skip: Int = 0
    first: Int = 100
    orderBy: Registration_orderBy
    orderDirection: OrderDirection
    where: Registration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Registration!]!
  nameRegistered(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameRegistered
  nameRegistereds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameRegistered_orderBy
    orderDirection: OrderDirection
    where: NameRegistered_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameRegistered!]!
  nameRenewed(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameRenewed
  nameReneweds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameRenewed_orderBy
    orderDirection: OrderDirection
    where: NameRenewed_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameRenewed!]!
  nameTransferred(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameTransferred
  nameTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameTransferred_orderBy
    orderDirection: OrderDirection
    where: NameTransferred_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameTransferred!]!
  wrappedDomain(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WrappedDomain
  wrappedDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: WrappedDomain_orderBy
    orderDirection: OrderDirection
    where: WrappedDomain_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WrappedDomain!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  resolver(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Resolver
  resolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: Resolver_orderBy
    orderDirection: OrderDirection
    where: Resolver_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Resolver!]!
  addrChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AddrChanged
  addrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: AddrChanged_orderBy
    orderDirection: OrderDirection
    where: AddrChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AddrChanged!]!
  multicoinAddrChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MulticoinAddrChanged
  multicoinAddrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: MulticoinAddrChanged_orderBy
    orderDirection: OrderDirection
    where: MulticoinAddrChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MulticoinAddrChanged!]!
  nameChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameChanged
  nameChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: NameChanged_orderBy
    orderDirection: OrderDirection
    where: NameChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameChanged!]!
  abiChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AbiChanged
  abiChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: AbiChanged_orderBy
    orderDirection: OrderDirection
    where: AbiChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AbiChanged!]!
  pubkeyChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PubkeyChanged
  pubkeyChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: PubkeyChanged_orderBy
    orderDirection: OrderDirection
    where: PubkeyChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PubkeyChanged!]!
  textChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TextChanged
  textChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TextChanged_orderBy
    orderDirection: OrderDirection
    where: TextChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TextChanged!]!
  contenthashChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContenthashChanged
  contenthashChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ContenthashChanged_orderBy
    orderDirection: OrderDirection
    where: ContenthashChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ContenthashChanged!]!
  interfaceChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InterfaceChanged
  interfaceChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: InterfaceChanged_orderBy
    orderDirection: OrderDirection
    where: InterfaceChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InterfaceChanged!]!
  authorisationChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuthorisationChanged
  authorisationChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: AuthorisationChanged_orderBy
    orderDirection: OrderDirection
    where: AuthorisationChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuthorisationChanged!]!
  versionChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VersionChanged
  versionChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: VersionChanged_orderBy
    orderDirection: OrderDirection
    where: VersionChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VersionChanged!]!
  domainEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DomainEvent
  domainEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DomainEvent_orderBy
    orderDirection: OrderDirection
    where: DomainEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DomainEvent!]!
  registrationEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegistrationEvent
  registrationEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RegistrationEvent_orderBy
    orderDirection: OrderDirection
    where: RegistrationEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegistrationEvent!]!
  resolverEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ResolverEvent
  resolverEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ResolverEvent_orderBy
    orderDirection: OrderDirection
    where: ResolverEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ResolverEvent!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TextChanged implements ResolverEvent {
  """Concatenation of block number and log ID"""
  id: ID!

  """Used to derive relationships to Resolvers"""
  resolver: Resolver!

  """Block number of the Ethereum block in which the event occurred"""
  blockNumber: Int!

  """Hash of the Ethereum transaction in which the event occurred"""
  transactionID: Bytes!

  """The key of the text record that was changed"""
  key: String!

  """The new value of the text record that was changed"""
  value: String
}

input TextChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  value: String
  value_not: String
  value_gt: String
  value_lt: String
  value_gte: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_contains_nocase: String
  value_not_contains: String
  value_not_contains_nocase: String
  value_starts_with: String
  value_starts_with_nocase: String
  value_not_starts_with: String
  value_not_starts_with_nocase: String
  value_ends_with: String
  value_ends_with_nocase: String
  value_not_ends_with: String
  value_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TextChanged_filter]
  or: [TextChanged_filter]
}

enum TextChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  key
  value
}

"""A string representation of microseconds UNIX timestamp (16 digits)"""
scalar Timestamp

type Transfer implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """The account that owns the domain after the transfer"""
  owner: Account!
}

input Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  owner
  owner__id
}

type VersionChanged implements ResolverEvent {
  """Unique identifier for this event"""
  id: ID!

  """The resolver associated with this event"""
  resolver: Resolver!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash associated with the event"""
  transactionID: Bytes!

  """The new version number of the resolver"""
  version: BigInt!
}

input VersionChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  version: BigInt
  version_not: BigInt
  version_gt: BigInt
  version_lt: BigInt
  version_gte: BigInt
  version_lte: BigInt
  version_in: [BigInt!]
  version_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VersionChanged_filter]
  or: [VersionChanged_filter]
}

enum VersionChanged_orderBy {
  id
  resolver
  resolver__id
  resolver__address
  resolver__contentHash
  blockNumber
  transactionID
  version
}

type WrappedDomain {
  """unique identifier for each instance of the WrappedDomain entity"""
  id: ID!

  """The domain that is wrapped by this WrappedDomain"""
  domain: Domain!

  """The expiry date of the wrapped domain"""
  expiryDate: BigInt!

  """The number of fuses remaining on the wrapped domain"""
  fuses: Int!

  """The account that owns this WrappedDomain"""
  owner: Account!

  """The name of the wrapped domain"""
  name: String
}

input WrappedDomain_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  fuses: Int
  fuses_not: Int
  fuses_gt: Int
  fuses_lt: Int
  fuses_gte: Int
  fuses_lte: Int
  fuses_in: [Int!]
  fuses_not_in: [Int!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WrappedDomain_filter]
  or: [WrappedDomain_filter]
}

enum WrappedDomain_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  expiryDate
  fuses
  owner
  owner__id
  name
}

type WrappedTransfer implements DomainEvent {
  """The unique identifier of the event"""
  id: ID!

  """The domain name associated with the event"""
  domain: Domain!

  """The block number at which the event occurred"""
  blockNumber: Int!

  """The transaction hash of the transaction that triggered the event"""
  transactionID: Bytes!

  """The account that owns the wrapped domain after the transfer"""
  owner: Account!
}

input WrappedTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: Bytes
  transactionID_not: Bytes
  transactionID_gt: Bytes
  transactionID_lt: Bytes
  transactionID_gte: Bytes
  transactionID_lte: Bytes
  transactionID_in: [Bytes!]
  transactionID_not_in: [Bytes!]
  transactionID_contains: Bytes
  transactionID_not_contains: Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WrappedTransfer_filter]
  or: [WrappedTransfer_filter]
}

enum WrappedTransfer_orderBy {
  id
  domain
  domain__id
  domain__name
  domain__labelName
  domain__labelhash
  domain__subdomainCount
  domain__ttl
  domain__isMigrated
  domain__createdAt
  domain__expiryDate
  blockNumber
  transactionID
  owner
  owner__id
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
